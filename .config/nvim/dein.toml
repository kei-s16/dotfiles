# Dark Powered Vim Plugins
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/ddu.vim'
depends = [
    'denops.vim',
    'ddu-ui-ff',
    'ddu-source-file_rec',
    'ddu-source-file_old',
    'ddu-filter-matcher_substring',
    'ddu-kind-file',
    'ddu-source-buffer',
    'ddu-commands.vim'
]
hook_add = '''
    call ddu#custom#patch_global({
        \   'ui': 'ff',
        \   'sources': [
        \       {'name': 'file_rec', 'params': {}},
        \       {'name': 'file_old', 'params': {}},
        \       {'name': 'buffer', 'params': {}},
        \   ],
        \   'sourceParams': {
        \       'file_rec': {'ignoredDirectories': ['.git', 'node_modules', 'vendor']},
        \       'file_old': {'ignoredDirectories': ['.git', 'node_modules', 'vendor']},
        \   },
        \   'sourceOptions': {
        \     '_': {
        \       'matchers': ['matcher_substring'],
        \     },
        \   },
        \   'kindOptions': {
        \     'file': {
        \       'defaultAction': 'open',
        \     },
        \   }
        \ })

    autocmd FileType ddu-ff call s:ddu_my_settings()
    function! s:ddu_my_settings() abort
      nnoremap <buffer><silent> <CR>
            \ <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
      nnoremap <buffer><silent> <Space>
            \ <Cmd>call ddu#ui#ff#do_action('toggleSelectItem')<CR>
      nnoremap <buffer><silent> i
            \ <Cmd>call ddu#ui#ff#do_action('openFilterWindow')<CR>
      nnoremap <buffer><silent> q
            \ <Cmd>call ddu#ui#ff#do_action('quit')<CR>
    endfunction

    autocmd FileType ddu-ff-filter call s:ddu_filter_my_settings()
    function! s:ddu_filter_my_settings() abort
      inoremap <buffer><silent> <CR>
      \ <Esc><Cmd>close<CR>
      nnoremap <buffer><silent> <CR>
      \ <Cmd>close<CR>
      nnoremap <buffer><silent> q
      \ <Cmd>close<CR>
    endfunction

    nmap <silent> <leader>o :<C-u>Ddu file_rec<CR>
    nmap <silent> <leader>r :<C-u>Ddu file_old<CR>
    nmap <silent> <leader>b :<C-u>Ddu buffer<CR>
'''

[[plugins]]
repo = 'Shougo/ddu-ui-ff'

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'

[[plugins]]
repo = 'Shougo/ddu-source-file_old'

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'

[[plugins]]
repo = 'Shougo/ddu-kind-file'

[[plugins]]
repo='shun/ddu-source-buffer'

[[plugins]]
repo='Shougo/ddu-commands.vim'

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
    nnoremap <silent> <Leader>n : <C-u>Defx -split=vertical -winwidth=40 -search=`expand('%:p')` `expand('%:p:h')`<CR>
    autocmd FileType defx call s:defx_my_settings()
    function! s:defx_my_settings() abort
        " Define mappings
        nnoremap <silent><buffer><expr> <CR>
        \ defx#is_directory() ?
        \   defx#do_action('open_directory') :
        \   defx#do_action('multi', ['drop', 'quit'])
        nnoremap <silent><buffer><expr> c
        \ defx#do_action('copy')
        nnoremap <silent><buffer><expr> m
        \ defx#do_action('move')
        nnoremap <silent><buffer><expr> p
        \ defx#do_action('paste')
        nnoremap <silent><buffer><expr> l
        \ defx#do_action('open')
        nnoremap <silent><buffer><expr> E
        \ defx#do_action('open', 'vsplit')
        nnoremap <silent><buffer><expr> P
        \ defx#do_action('preview')
        nnoremap <silent><buffer><expr> o
        \ defx#do_action('open_tree', 'toggle')
        nnoremap <silent><buffer><expr> K
        \ defx#do_action('new_directory')
        nnoremap <silent><buffer><expr> N
        \ defx#do_action('new_file')
        nnoremap <silent><buffer><expr> M
        \ defx#do_action('new_multiple_files')
        nnoremap <silent><buffer><expr> C
        \ defx#do_action('toggle_columns',
        \                'mark:indent:icon:filename:type:size:time')
        nnoremap <silent><buffer><expr> S
        \ defx#do_action('toggle_sort', 'time')
        nnoremap <silent><buffer><expr> d
        \ defx#do_action('remove')
        nnoremap <silent><buffer><expr> r
        \ defx#do_action('rename')
        nnoremap <silent><buffer><expr> !
        \ defx#do_action('execute_command')
        nnoremap <silent><buffer><expr> x
        \ defx#do_action('execute_system')
        nnoremap <silent><buffer><expr> yy
        \ defx#do_action('yank_path')
        nnoremap <silent><buffer><expr> .
        \ defx#do_action('toggle_ignored_files')
        nnoremap <silent><buffer><expr> ;
        \ defx#do_action('repeat')
        nnoremap <silent><buffer><expr> h
        \ defx#do_action('cd', ['..'])
        nnoremap <silent><buffer><expr> ~
        \ defx#do_action('cd')
        nnoremap <silent><buffer><expr> q
        \ defx#do_action('quit')
        nnoremap <silent><buffer><expr> <Space>
        \ defx#do_action('toggle_select') . 'j'
        nnoremap <silent><buffer><expr> *
        \ defx#do_action('toggle_select_all')
        nnoremap <silent><buffer><expr> j
        \ line('.') == line('$') ? 'gg' : 'j'
        nnoremap <silent><buffer><expr> k
        \ line('.') == 1 ? 'G' : 'k'
        nnoremap <silent><buffer><expr> <C-l>
        \ defx#do_action('redraw')
        nnoremap <silent><buffer><expr> <C-g>
        \ defx#do_action('print')
        nnoremap <silent><buffer><expr> cd
        \ defx#do_action('change_vim_cwd')
    endfunction
'''

[[plugins]]
repo = 'Shougo/deol.nvim'
hook_add = '''
    nnoremap <silent> <Leader>t : <C-u>Deol -split=floating -winwidth=120<CR>
'''

[[plugins]]
repo = 'Shougo/ddc.vim'
depends = [
    'denops.vim',
    'ddc-around',
    'ddc-matcher_head',
    'ddc-sorter_rank',
    'ddc-nvim-lsp',
    'skkeleton'
]
hook_add = '''
    " Use matcher_head and sorter_rank.
    " https://github.com/Shougo/ddc-matcher_head
    " https://github.com/Shougo/ddc-sorter_rank
    call ddc#custom#patch_global('sources', ['skkeleton'])
    call ddc#custom#patch_global('sourceOptions', {
    \   '_': {
    \     'matchers': ['matcher_head'],
    \     'sorters': ['sorter_rank']
    \   },
    \   'skkeleton': {
    \     'mark': 'skkeleton',
    \     'matchers': ['skkeleton'],
    \     'sorters': [],
    \     'minAutoCompleteLength': 0,
    \   },
    \ })

    call ddc#custom#patch_global('sources', ['nvim-lsp'])
    call ddc#custom#patch_global('sourceOptions', {
          \ 'nvim-lsp': {
          \   'mark': 'lsp',
          \   'forceCompletionPattern': '\.\w*|:\w*|->\w*' },
          \ })

    " Change source options
    call ddc#custom#patch_global('sourceOptions', {
          \ 'around': {'mark': 'A'},
          \ })
    call ddc#custom#patch_global('sourceParams', {
          \ 'around': {'maxSize': 500},
          \ })

    " Customize settings on a filetype
    call ddc#custom#patch_filetype('markdown', 'sourceParams', {
          \ 'around': {'maxSize': 100},
          \ })

    " Mappings

    " <TAB>: completion.
    inoremap <silent><expr> <TAB>
    \ pumvisible() ? "\<C-n>" :
    \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
    \ "\<TAB>" : ddc#manual_complete()

    " <S-TAB>: completion back.
    inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"

    " Use ddc.
    call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-around'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'

# dependencies
[[plugins]]
repo = 'vim-denops/denops.vim'

# Utils
[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
    nmap <silent> <leader>g :<C-u>Git<CR>
    nmap <silent> <leader>L :<C-u>Gclog<CR>
    nmap <silent> <leader>d :<C-u>Gdiff<CR>
'''

# for cmdheight=0
[[plugins]]
repo = 'MunifTanjim/nui.nvim'

[[plugins]]
repo = 'folke/noice.nvim'
depends = ['nui.vim']

# LSP
[[plugins]]
repo = 'neovim/nvim-lspconfig'

[[plugins]]
repo = 'williamboman/nvim-lsp-installer'

# 日本語関連のあれこれ
[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'vim-skk/skkeleton'
depends = ['denops.vim']
hook_add = '''
    call skkeleton#config({ 'globalJisyo': '~/.eskk/SKK-JISYO.L' })
    call skkeleton#config({ 'userJisyo': '~/.eskk/USER.L' })

    imap <C-j> <Plug>(skkeleton-enable)
    cmap <C-j> <Plug>(skkeleton-enable)
'''

[[plugins]]
repo = 'vim-jp/autofmt'
hook_add = 'set formatexpr=autofmt#japanese#formatexpr()'

# テーマ
[[plugins]]
repo = 'altercation/vim-colors-solarized'
hook_add = '''
    set background=light
    colorscheme solarized
'''

# ファイル依存系
[[plugins]]
repo = 'mechatroner/rainbow_csv'
